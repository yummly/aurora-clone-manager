AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: 'Aurora clone manager'
Parameters:
  LogLevel:
    Type: String
    Description: "LAmbda log level"
    Default: info
  CustomResourceType:
    Type: String
    Description: "The CloudFormation custom resource type implemented by this function"
    Default: "Custom::AuroraClone"
  MaxCopyAge:
    Type: String
    Description: "The maximum age of a copy from which a clone can be created, as ISO 8601 duration"
    Default: P3D
  MaxClonesPerSource:
    Type: Number
    Description: "The maximum number of Aurora clones per source"
    Default: 15
  MaintenanceSchedule:
    Type: String
    Description: "The schedule expression for the maintenance task"
    Default: "rate(1 day)"
  # The parameters used for auto-following a branch
  GitHubRepo:
    Type: String
    Description: "The GitHub repo of hosting this service"
  GitBranchFollow:
    Type: String
    Description: "The git branch to autofollow, !follow is a special value used to turn this off"
    Default: "!follow"
  GitSha:
    Type: String
    Description: "The git sha, should be provided by the build script by overwriting the default value"
  DefaultSecretPrefix:
    Type: String
    Description: "The prefix for password secrets"
    Default: "/aurora-clone-manager/"
  SetupDefaultAccess:
    Type: String
    Description: "If true, this stack will setup a default key for password secrets and a policy granting read access to those secrets and the key. The policy will be exported and can be used"
    Default: "true"
  DefaultAccessGroups:
    Type: CommaDelimitedList
    Description: "Optionally provide an IAM group to assign the default acccess policy to"
    Default: ""
  DefaultAccessRoles:
    Type: CommaDelimitedList
    Description: "Optionally provide an IAM roles to assign the default acccess policy to"
    Default: ""
Conditions:
  SetupDefaultAccess: !Equals [ !Ref SetupDefaultAccess, "true" ]
  SetupDefaultAccessGroups: !And [ !Equals [ !Ref SetupDefaultAccess, "true" ], !Not [ !Equals [ !Join [ ",", !Ref DefaultAccessGroups ], ""] ] ]
  SetupDefaultAccessRoles: !And [ !Equals [ !Ref SetupDefaultAccess, "true" ], !Not [ !Equals [ !Join [ ",", !Ref DefaultAccessRoles ], "" ] ] ]
Resources:
  DefaultAccessKey:
    Condition: SetupDefaultAccess
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Version: 2012-10-17
        Id: key-default-1
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - ':root'
            Action: 'kms:*'
            Resource: '*'
      Tags:
        - Key: y.key-purpose
          Value: aurora-clone-secret-default
  DefaultAccessPolicy:
    Condition: SetupDefaultAccess
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "default-access-for-${AWS::StackName}"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource:
              - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${DefaultSecretPrefix}*"
          - Effect: Allow
            Action:
              - kms:Decrypt
            Resource:
              - !GetAtt DefaultAccessKey.Arn
      Groups: !If [SetupDefaultAccessGroups, !Ref DefaultAccessGroups, !Ref "AWS::NoValue"]
      Roles: !If [SetupDefaultAccessRoles, !Ref DefaultAccessRoles, !Ref "AWS::NoValue"]

  Lambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: aurora-clone-manager.core.HandleCustomResource
      Runtime: java8
      CodeUri: ./target/uberjar/lambda.jar
      Description: "Aurora clone management"
      MemorySize: 512
      Timeout: 300
      # concurrency needs to be set to 1, the Lambda doesn't support concurrent executions
      ReservedConcurrentExecutions: 1
      Environment:
        Variables:
          LOG_LEVEL: !Ref LogLevel
          RESOURCE_TYPE: !Ref CustomResourceType
          MAX_AGE: !Ref MaxCopyAge
          MAX_CLONES_PER_SOURCE: !Ref MaxClonesPerSource
          MAINTENANCE_CONFIG_SSM: !Sub /${AWS::StackName}/maintenance-config
          DEFAULT_SECRET_PREFIX: !Ref DefaultSecretPrefix
          DEFAULT_SECRET_KEY: !If [SetupDefaultAccess, !Ref DefaultAccessKey, !Ref "AWS::NoValue"]
          STACK_NAME: !Ref "AWS::StackName"
      Events:
        RDSEvents:
          Type: SNS
          Properties:
            Topic: !Ref RDSEventTopic
        Maintenance:
          Type: Schedule
          Properties:
            Schedule: !Ref MaintenanceSchedule
            Input: '{"source": "events", "action": "maintain!"}'
      Policies:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - Statement:
            - Effect: Allow
              Action:
                - rds:DescribeDBClusters
                - rds:DescribeDBInstances
              Resource:
                - '*'
            - Effect: Allow
              Action:
                - rds:DescribeDBClusters
                - rds:DescribeDBInstances
                - rds:ListTagsForResource
                - rds:DeleteDBInstance
                - rds:DeleteDBCluster
                - rds:RestoreDBClusterToPointInTime
                - rds:CreateDBInstance
                - rds:ModifyDBCluster
              Resource:
                - !Sub arn:${AWS::Partition}:rds:${AWS::Region}:${AWS::AccountId}:cluster:*
                - !Sub arn:${AWS::Partition}:rds:${AWS::Region}:${AWS::AccountId}:db:*
                - !Sub arn:${AWS::Partition}:rds:${AWS::Region}:${AWS::AccountId}:subgrp:*
                - !Sub arn:${AWS::Partition}:rds:${AWS::Region}:${AWS::AccountId}:og:*
            - Effect: Allow
              Action:
                - ssm:DescribeParameters
                - ssm:GetParameters
                - ssm:GetParameter
              Resource:
                - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/maintenance-config
            # TODO: find a way to restrict KMS and secrets manager permissions.
            - Effect: Allow
              Action:
                - 'secretsmanager:*'
              Resource:
                - '*'
            - Effect: Allow
              Action:
                - 'kms:*'
              Resource:
                - '*'
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - events:PutEvents
              Resource:
                - '*'
  RDSEventTopic:
    Type: AWS::SNS::Topic
  RDSEventSubscription:
    Type: AWS::RDS::EventSubscription
    Properties:
      Enabled: true
      EventCategories:
        - creation
      SnsTopicArn: !Ref RDSEventTopic
      SourceType: db-instance
Outputs:
  LambdaName:
    Description: The name of the created lambda fn
    Value: !Ref Lambda
    Export:
      Name: !Sub "${AWS::StackName}-LambdaName"
  LambdaArn:
    Description: The ARN of the created lambda fn
    Value: !GetAtt Lambda.Arn
    Export:
      Name: !Sub "${AWS::StackName}-LambdaArn"
  RoleArn:
    Description: "The ARN of the created lambda fn's role, Can be used to, e.g., grant permissions on KMS keys"
    Value: !GetAtt LambdaRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-RoleArn"
  DefaultSecretPrefix:
    Description: "The default prefix of password secrets"
    Value: !Ref DefaultSecretPrefix
    Export:
      Name: !Sub "${AWS::StackName}-DefaultSecretPrefix"
  DefaultPasswordSecretKmsKeyId:
    Description: "The KMS Key Id for default access"
    Condition: SetupDefaultAccess
    Value: !Ref DefaultAccessKey
    Export:
      Name: !Sub "${AWS::StackName}-DefaultPasswordSecretKmsKeyId"
  DefaultAccessPolicyArn:
    Description: "The IAM Policy Arn for default access"
    Condition: SetupDefaultAccess
    Value: !Ref DefaultAccessPolicy
    Export:
      Name: !Sub "${AWS::StackName}-DefaultAccessPolicyArn"
